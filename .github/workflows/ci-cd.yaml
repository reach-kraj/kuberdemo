name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: kraj28/kuberdemo
  HELM_CHART_PATH: ./helm/kuberdemo-chart

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn clean test

  build-and-push:
    needs: test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          docker push ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_GZ_BASE64 }}" | base64 -d > ~/.kube/config.gz
          gunzip -f ~/.kube/config.gz
          mv ~/.kube/config ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Verify Kubernetes connection
        run: |
          kubectl get nodes
          kubectl get namespaces

      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install kuberdemo ${{ env.HELM_CHART_PATH }} \
            --set image.repository=${{ env.DOCKER_IMAGE }} \
            --set image.tag=latest \
            --wait --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -l app.kubernetes.io/name=kuberdemo-chart
          kubectl get svc -l app.kubernetes.io/name=kuberdemo-chart
          kubectl rollout status deployment/kuberdemo-kuberdemo-chart
